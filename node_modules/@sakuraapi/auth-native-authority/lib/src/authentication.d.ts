/// <reference types="express" />
import { IAuthenticatorConstructor, SakuraApi, SakuraApiPluginResult } from '@sakuraapi/core';
import { Handler, Request, Response } from 'express';
export interface ICustomTokenResult {
    audience: string;
    token: string;
    unEncodedToken?: any;
}
export interface IAuthenticationAuthorityOptions {
    authenticator: IAuthenticatorConstructor[] | IAuthenticatorConstructor;
    authDbConfig: {
        collection: string;
        db: string;
    };
    bcryptHashRounds?: number;
    create?: {
        acceptFields?: any;
    };
    defaultDomain?: string;
    endpoints?: {
        changePassword?: string;
        create?: string;
        emailVerification?: string;
        forgotPassword?: string;
        login?: string;
        newEmailVerificationKey?: string;
        resetPassword?: string;
    };
    model?: {
        email?: {
            dbField?: string;
            jsonField?: string;
        };
        domain?: {
            dbField?: string;
            jsonField?: string;
        };
        password?: {
            dbField?: string;
        };
        emailVerified?: {
            dbField?: string;
            jsonField?: string;
        };
        emailVerificationKey?: {
            dbField?: string;
            jsonField?: string;
        };
        passwordResetHash?: {
            dbField?: string;
        };
        lastLoginDb?: {
            dbField?: string;
        };
        passwordStrength?: {
            dbField?: string;
        };
    };
    onBeforeUserCreate?: Handler | Handler[];
    onChangePasswordEmailRequest?: (user: any, req?: Request, res?: Response) => Promise<any>;
    onError?: (err: Error) => Promise<any>;
    onForgotPasswordEmailRequest: (user: any, token: string, req?: Request, res?: Response) => Promise<any>;
    onJWTPayloadInject?: (payload: any, dbResult: any) => Promise<any>;
    onLoginSuccess?: (user: any, jwt: any, sapi: SakuraApi, req?: Request, res?: Response) => Promise<void>;
    onResendEmailConfirmation: (user: any, emailVerificationKey: string, req?: Request, res?: Response) => Promise<any>;
    onInjectCustomToken?: (token: any, key: string, issuer: string, expiration: string, payload: any, jwtId: string) => Promise<ICustomTokenResult[]>;
    onUserCreated: (newUser: any, emailVerificationKey: string, req?: Request, res?: Response) => Promise<any>;
    userDbConfig: {
        collection: string;
        db: string;
    };
}
export declare function addAuthenticationAuthority(sapi: SakuraApi, options: IAuthenticationAuthorityOptions): SakuraApiPluginResult;
